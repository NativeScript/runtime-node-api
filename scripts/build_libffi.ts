import { $ } from "./deps.ts";

$.setPrintCommand(true);

// CWD is scripts/
Deno.chdir(new URL("../libffi", import.meta.url));

Deno.env.set("CC", "clang");
Deno.env.set("CFLAGS", "-w");

if (
  !Deno.env.get("SKIP_GENERATE_SOURCE") &&
  !Deno.args.includes("--skip-generate-source")
) {
  for (const platform of ["ios", "osx"]) {
    await $`python generate-darwin-source-and-headers.py --only-${platform}`;
  }
}

for (
  const dir of [
    "iphoneos-arm64",
    "iphonesimulator-x86_64",
    "iphonesimulator-arm64",
    "macosx-x86_64",
    "macosx-arm64",
  ]
) {
  await $`make -C build_${dir} install`;
}

await Deno.remove("build_macosx-universal", { recursive: true }).catch(
  () => {},
);
await Deno.mkdir("build_macosx-universal/.libs", { recursive: true });
await Deno.mkdir("build_macosx-universal/include", { recursive: true });

const archs = ["arm64", "x86_64"];

async function combineHeaders(target: string) {
  const ffi_h_arm64 = await Deno.readTextFile(
    `build_${target}-${archs[0]}/include/ffi.h`,
  );
  const ffi_h_x86_64 = await Deno.readTextFile(
    `build_${target}-${archs[1]}/include/ffi.h`,
  );
  const ffitarget_h_arm64 = await Deno.readTextFile(
    `build_${target}-${archs[0]}/include/ffitarget.h`,
  );
  const ffitarget_h_x86_64 = await Deno.readTextFile(
    `build_${target}-${archs[1]}/include/ffitarget.h`,
  );

  const ffi_h_universal = `// This file is generated by scripts/build_libffi.ts
  // Merged from build_${target}-${
    archs[0]
  }/include/ffi.h and build_${target}-${archs[1]}/include/ffi.h
  
  #if defined(__aarch64__)
  ${ffi_h_arm64}
  #elif defined(__x86_64__)
  ${ffi_h_x86_64}
  #else
  #error "Unsupported architecture"
  #endif
  `;

  const ffitarget_h_universal =
    `// This file is generated by scripts/build_libffi.ts
  // Merged from build_${target}-${
      archs[0]
    }/include/ffitarget.h and build_${target}-${archs[1]}/include/ffitarget.h
  
  #if defined(__aarch64__)
  ${ffitarget_h_arm64}
  #elif defined(__x86_64__)
  ${ffitarget_h_x86_64}
  #else
  #error "Unsupported architecture"
  #endif
  `;

  await Deno.writeTextFile(
    `build_${target}-universal/include/ffi.h`,
    ffi_h_universal,
  );

  await Deno.writeTextFile(
    `build_${target}-universal/include/ffitarget.h`,
    ffitarget_h_universal,
  );
}

await combineHeaders("macosx");

await $`lipo -create -output build_macosx-universal/.libs/libffi_convenience.a build_macosx-x86_64/.libs/libffi_convenience.a build_macosx-arm64/.libs/libffi_convenience.a`;

await Deno.remove("build_iphonesimulator-universal", { recursive: true }).catch(
  () => {},
);
await Deno.mkdir("build_iphonesimulator-universal/.libs", { recursive: true });
await Deno.mkdir("build_iphonesimulator-universal/include", {
  recursive: true,
});

await $`lipo -create -output build_iphonesimulator-universal/.libs/libffi_convenience.a build_iphonesimulator-x86_64/.libs/libffi_convenience.a build_iphonesimulator-arm64/.libs/libffi_convenience.a`;

await combineHeaders("iphonesimulator");
